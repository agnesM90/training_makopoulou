---
title: "R Practice: Functions"
format: html
editor: visual
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
1 + 1
```

You can add options to executable code like this

```{r}
```

```{r}
```

```{r}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed
#downlad packages
```{r}
library(rvest)## reads html into a dataframe
library(readr)
library(dplyr)
library(janitor)# cleans 
```
```{r}
webpage <- rvest::read_html("https://www.pwrc.usgs.gov/BBL/Bander_Portal/login/speclist.php")

tbls <- rvest::html_nodes(webpage, "table") %>% 
    rvest::html_table(fill = TRUE)

species <- tbls[[1]] %>% 
    janitor::clean_names() %>% 
    select(alpha_code, common_name) %>% 
    mutate(alpha_code = tolower(alpha_code))

head(species, 3)
```



#exercise
#load data with 2 ways
#read predator data from url test

```{r}
pred <- read_csv("https://arcticdata.io/metacat/d1/mn/v2/object/urn%3Auuid%3A9ffec04c-7e2d-41dd-9e88-b6c2e8c4375e")
```

```{r}
## When reading from a file in your data folder in your Rpoj
nest_data <-  read_csv("data/Utqiagvik_nest_data.csv")

predator_survey <- read_csv("data/Utqiagvik_predator_surveys.csv")

egg_measures <- read_csv("data/Utqiagvik_egg_measurements.csv")



colnames(predator_survey)
glimpse(predator_survey)
unique(predator_survey$species)
summary(predator_survey)
```
```{r}
#how to translate speciesinto commoon name 

predator_comm_names <- left_join(predator_survey,
                                 species,
                                 by = c("species" = "alpha_code"))


```
#or 
```{r}
egg_common_names <- right_join(egg_measures,
                               species, 
                               by = c("species" = "alpha_code"))


```



#question 3 make it as a function
```{r}
assign_species_name <- function(df, species){
    return_df <- left_join(df, species, by = c("species" = "alpha_code"))
    return(return_df)
}
```

#insert Roxygen skel and adding the necesary description

```{r}

#' @param df A data frame containing BBL species codes in column `species`
#' @param species A data frame defining BBL species codes with columns `alpha_code` and `common_name` 
#'
#' @return A data frame with original data df, plus the common name of species
#' @export
#'
#' @examples `*provide an example*`


assign_species_name <- function(df, species){
    return_df <- left_join(df, species, by = c("species" = "alpha_code"))
    return(return_df)
}
```


##Use your function to clean names of each data frame
```{r}

predator_clean <- assign_species_name(predator_survey, species) %>% 
    select(year, date, common_name) %>% 
    filter(!is.na(common_name))
View(predator_clean)

nest_location_clean <- assign_species_name(nest_data, species) %>% 
    select(year,lat_corrected, long_corrected) 
View(nest_location_clean)

eggs_clean <- assign_species_name(egg_measures, species) %>% 
    select(nestID, common_name, length) %>% 
    filter(!is.na(common_name))
View(eggs_clean)
```


#optional copy
```{r}
#' Function to add common name to data.frame according to the BBL list of species codes

#' @param df A data frame containing BBL species codes in column `species`
#' @param species A data frame defining BBL species codes with columns `alpha_code` and `common_name`
#' @return A data frame with original data df, plus the common name of species

assign_species_name <- function(df, species){
    if (!("alpha_code" %in% names(species)) |
        !("species" %in% names(df)) |
        !("common_name" %in% names(species))){
      stop("Tables appear to be formatted incorrectly.")
    }  
  
    return_df <- left_join(df, species, by = c("species" = "alpha_code"))
    
    if (nrow(return_df) > nrow(df)){
      warning("Joined table has more rows than original table. Check species table for duplicated code values.")
    }
    
    if (length(which(is.na(return_df$common_name))) > 0){
      x <- length(which(is.na(return_df$common_name)))
      warning(paste("Common name has", x, "rows containing NA"))
    }
    
    return(return_df)
        
}
```

